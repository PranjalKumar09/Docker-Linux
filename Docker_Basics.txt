Docker Basics
==============

By docker it is easier for tester to test software from developer


Container
-----------

    * A way to packacge an apllication  with all necessary  dependecies and configuration
    * It can be easily shared
    * Makes deployment & development efficient


Architecture of Docker
-----------------------

    Hardware -> OS -> Docker Enginer -> Container

    There can multiple docker

    Hardware -> OS -> Docker Enginer -> Container (v1)  version 1 
                                     -> Container (v2)  version 2


Docker Container Vs VMs
-----------------------

    Docker Container -> Low impact on OS, very fast, low disk space usage
    VMs              -> High impact on OS, slower , high disk space usage
    
    Docker Container -> Sharing, rebuilding & distribution is easy 
    VMs              -> Sharing, rebuilding & distribution is challenging
    
    Docker Container -> Encapsulate apps instesad of whole machine  
    VMs              -> Encapsulate whole machine


Main Componnents of Docker
--------------------------

    * Dockery File
    * Dockery Image
    * Dockery Container
    * Dockery Registry 

See Image Docker_Basics.png



Docker Reigister 
---------------- 
    is centeral repository for storing & distributing Docker images



Note ->  A registry is a centralized location that stores and manages container images, whereas a repository is a collection of related container images within a registry. 


Also remember that doker file doesnt have extension it just written DockerFile without extension



use -> FROM ---
    ex -> FROM node
use version number like -> FROM <repository_name>:<n>
    ex -> FROM node:20



*      docker run -p host_port:container_port <image-id>
        p means here continer port publish a container's port to the host

    host_port: The port on the host machine.
    container_port: The port inside the Docker container.

* We can't bind the same host port to multiple Docker containers simultaneously other wise port conflic error will come.

* -d (Detach Mode)
    Purpose: The -d flag is used to run the Docker container in detached mode.
    Behavior: When a container is started in detached mode, it runs in the background, and the command prompt returns immediately.


  -p (Port Mapping)
    Purpose: The -p flag is used to map ports from the host machine to the Docker container.


Doing changes to project (fixing bug, updates):  
    we can just do new tag version 2



Push Image in DockerHub
======================= 
    We can uploda our image in docker hub, other team can download from There

    You can create in   hub.docker.com  and create repository 

    You can push new tag -> docker push <userid>/<repo-name>:tagname 

    You have to login using docker login on terminal -> docker login

    To push with onlin <userid>/<repo-name> you have to first build the image the push possible 
    Just like github you can push in docker -> 
        ex -> docker build -t pranjalkumar09/webapp-demo:01 .

    docker push <userid>/<repo-name> 
        ex-> docker push pranjalkumar09/webapp-demo:01

    When we push different tag/version of image in docker then we might see coming "Layer already exists" coming in terminal this shows how docker smartly link same thing


Docker Pulling
==============
    To pull online docker image in remote system => docker pull <userid>/<repo-name>
                docker pull pranjalkumar09/webapp-demo:02

    Now we can even make conatiner for this 


Docker Volume 
=============
    Now if we make  contianer python program which include something like showing a file it will changes happen during just that program    ex: see python_project folder
    run its continar -> python_project$ docker run -it --rm --name mypythonapp ad1add67b5af

    So docker volume needed-> docker run -it --rm -v myvolume:/myapp/ ad1add67b5af

    now all changes on file will visible , in docker volume.


Help -> by   --help   we will get any help information regardung commands.
==================================



Mount Binds
=========== 
    When we want to see changes done by ourself in file and we want that it appears in file
    like in      python_project03

    new updates will not appear this , we can new update in file by     => docker run -v "/media/pranjal/New Volume/CODES/Public/Docker&Github/python_project3/servers.txt:/myapp/servers.txt" --rm dd55adccd99f 

    docker run -v "/path/on/host:/path/in/container" --rm image_name


    new changes will appear here but not in above case

    also note that in this it is not docker volume so it will not visible in docker

Dockerignore
============
    can be created in same file where dockerimage     .dockerignore
    Like .gitignore  it supports everything 

    We dont need Dockerimage generally but it is important so we can put it in .dockerignore


Working with API
================
    When you import some module in Docker conatainer it still didnt run , because conatainer has no external dependencies

    To run external dependecies in it simply add  RUN pip install requests 
    Then run it 

    Now it will run     imported thing

Container with local DB 
======================== 
    When we connect database to program and copy program in docker and run its container cause error to (see "Container_with_local_DB" ) host.docker.internal
    Then to deal with this error we will change this in line6
         host="localhost"   to   host="host.docker.internal"

    Then in new container it will not cause error and it will acess the database




Docker Network
==============
    --network <network-name>

    in any python program like in like connecting to database   in the   host name   we have put our     <container-name>



Docker Compose
==============
    Configuration file to manage multiple container running on same machine
    Usually composing a program

    docker run -d --enve MYSQL_ROOT_PASSWORD="root" --env MYSQL_DATABASE="userinfor" --name mysqldb --network my-net mysql 

    Like this command typing it again is not efficient so to tackle it 
        Make     docker-compose.yml    file
    
        in this 
            services:  #which means conatainer

    Now to access images in docker-compose.yml  we have to docker-compose up 

     (must delete any previous docker image with same name is name given in docker conatainer.yml)


    docker compose down : remove docker container (without --rm)

    To run it in detach mod: docker --compose up -d



    Docker Compose with Multiple Container 
    --------------------------------------

        we can out multiple containers
            what is normally 