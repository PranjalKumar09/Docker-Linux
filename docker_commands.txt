Images
======

    docker images or docker image ls: List all images on the local machine.
    docker pull [image]: Download an image from a Docker registry.
    docker rmi [image]: Remove an image from the local machine.
    
    docker tag [source_image] [target_image]: Create a new tag for an existing image.
        # This even works like rename for image 

Containers
==========

    docker ps: List running containers. // ps means program status
    docker ps -a: List all containers, including those that are stopped.
    docker run [options] [image]: Create and start a new container from an image.
    docker stop [container]: Stop a running container.
    docker start [container]: Start a stopped container.
    docker rm [container]: Remove a stopped container.
    docker exec -it [container] [command]: Execute a command in a running container.

Docker Compose
==============

    docker-compose up: Start services defined in a docker-compose.yml file.
    docker-compose down: Stop and remove containers defined in a docker-compose.yml file.
    docker-compose logs: View logs from services.
    docker-compose run <name>: Run single images from docker-compose

    docker-compose up --build:  it will not load from cache, instead make it 

Networks
========

    docker network ls: List all networks.
    docker network create [network]: Create a new network.
    docker network create [network] -d <name>: Create a new network with driver
    docker network rm [network]: Remove a network.

Volumes
=======

    docker volume ls: List all volumes.
    docker volume create [volume]: Create a new volume.
    docker volume rm [volume]: Remove a volume.
    docker volume inspect [volume]: Inspect a volume.

System
======

    docker system df: Show disk usage for Docker.
    docker system prune: Remove unused data (images, containers, volumes).

Images and Containers (Detailed)
================================

    docker image inspect [image]: Show detailed information about an image.
    docker container inspect [container]: Show detailed information about a container.

Some Extra Commands:
====================

    * docker run -d --rm -p <host_port>:<container_port> <image_id> 
        # This will run - detach and then remove automatically. You must stop this by ->docker stop <image_id> inorder to remove it.
        (even it will be removed from when you see docker ps -a)

    * --name "<name>" 
        example: docker run -d --rm --name "mywebapp" -p 3001:3000 8ff0b0680615
        Now in docker ps name will appear that name

    * docker build -t <image-name>:<tag> <path>
        docker build: Initiates the build process for a Docker image.
        -t <image-name>:<tag>: Tags the image with a specific name and tag. The tag is optional but useful for versioning.
        <path>: Specifies the build context, which is the directory where the Dockerfile is located. This is typically the current directory (.)

    * docker rmi <image_name>:<tag>
        To remove the this image with this tag

    * docker run -it <image_id> 
        To run image in interactive mode like in python

    


    * docker run -it --rm -v myvolume:/myapp/ ad1add67b5af
        -v myvolume:/myapp/:
            The syntax is -v <volume_name>:<container_path>:
            myvolume is the name of the Docker volume
            /myapp/ is the path inside the container where the volume will be mounted. This makes the data in myvolume accessible at /myapp/ inside the container.

        ad1add67b5af:
        Identifier of the Docker image

    *     like for java application we dont watn to  one time run, we want it keep running , So

        docker run -itd <image_id>

Mount Bind
==========
    docker run -v "/path/on/host:/path/in/container" --rm image_name
    or 
    image name can be image id 
    docker run -v "<absolute_path>:/path/in/container" --rm image_name


Miscellaneous
===============

   $sudo usermod -aG docker $USER
    $ newgrp docker


adding our current user and updating that group


    docker attach <container-id-or-name>
    it will give live logs


    which is now solved in docker_compose.yml


    services:
  java_app:
    build:
      context: .
    container_name: "expensesapp"
    networks:
      - expenses-app-nw
    environment:
      SPRING_DATASOURCE_URL: "jdbc:mysql://mysql:3306/expenses_tracker?allowPublicKeyRetrieval=true&useSSL=false"
      SPRING_DATASOURCE_USERNAME : "root"
      SPRING_DATASOURCE_PASSWORD : "Test@123"
    depends_on:
      - mysql_db
    ports:
      - "8080:8080"
    restart: always
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8080 || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 60s

  mysql_db:
    image: mysql
    container_name: "mysql"
    networks:
      - expenses-app-nw
    environment:
      MYSQL_ROOT_PASSWORD: "Test@123"
      MYSQL_DATABASE: "expenses_tracker"
      MYSQL_SSL: "0"  # Disable SSL
    restart: always
    ports:
      - "3306:3306"
    volumes:
      - mysql_data:/var/lib/mysql  # Add volume here
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-uroot", "-pTest@123"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 60s


networks:
  expenses-app-nw:
volumes:
  mysql_data:  # Declare the volume here